Существует структура "FaceDescription". Эта структура разделена на две части. Первая - это подструктура данной структуры "FaceDescriptionHeader". FaceDescriptionHeader содержит в себе некую значимую информацию - номер кадра, на котором лицо определено наиболее четко и ясно, координаты лица на данном кадре (вертикаль, горизонталь, ширина и высота) и рамер структуры, которая является шаблоном лица (этот параметр необходим на тот случай, если размер данной структуры будет изменяться в библиотеке FaceSDK). Второе - это адрес хранения первого элемента шаблона лица (шаблон лица представляет из себя массив байтов, а данное поле - адрес самого первого). 
Так же существует структура "FrameRegion". Она содержит в себе два поля - первый кадр и длительность региона в кадрах. Если в регион входит только один начальный кадр, то длительность равна одному.

Реализация класса, занимающегося обработкой входящего потока изображений, поиском на этих изображениях лиц и сохранением этих лиц (однако, сохранением только "в памяти", в базу данный класс не пишет).
Поскольку класс FaceFinder будет хранить в себе набор временных данных, доступ к которым должен быть закрыт для конечного пользователя, предполагается создать интерфейс (абстактный класс, в терминах языка C++), описывающий набор функций, конструкторов и операторов. В свою очередь, класс-наследник будет содержать реализацию данного интерфейса и поля, хранящие данные. Конечный пользователь же, в свою очередь, имеет доступ только к интерфейсу получая, таким образом, доступ к функциональности и не имея доступа к самой реализации.
Описание интерфейса IFaceFinder.
Интерфейс не имеет публичного конструктора (за исключением конструкторов копирования и перемещения), то есть создать объект "извне" невозможно. Для создания объекта объявлена статическая функция "createFaceFinder", находящаяся в публичной части. Данная функция будет вызывать конструктор для создания объекта и возвращать указатель на данный объект. Сам же конструктор объявлен в части "protected" и является виртуальным.
Для корректной работы с памятью, в интерфейсе объявлены следующие компоненты - конструктор копирования, конструктор перемещения, деструктор, оператор присваивания копированием и оператор присваивания перемещением. Все они объявлены виртуальными и должны быть имплементированы в классе наследнике.
Интерфейс IFaceFinder содержит в себе enum ColorDepth, обозначающий глубину цвета входящего изображения - 8, 24 или 32 бит.

FaceFinder,наследник интерфейса IFaceFinder имеет следующую реализацию:
Класс FaceFinder содержит подструктуру DescriptionData. В Данная структура имеет два поля - структура FaceDescription и лист структур FrameRegion (поскольку регионов с данным лицом  может быть несколько и они могут быть не связаны). У данной структуры "удалены" конструкторы копирования, перемещения, оператор присваивания и оператор перемещения для того, чтобы каждый объект такого типа был уникальным. Деструктор перегружен и занимается освобождением памяти.
Класс FaceFinder содержит три поля. Первое, содержащее в себе всю основную информацию - это ассоциативный массив std::map из стандарной библиотеки, содержащий в качестве ключа индекс данного "описания лица", а в качестве значения экземпляр структуры DescriptionData, соответствующий данному индексу. Два других поля явлюются статическими и вспомогательными. Первое статическое поле - это константный ассоциативный массив std::map, ставящий в соответствие объекту "нашего" enum ColorDepth соответствующий enum из библиотеки FaceSDK. Второе статическое поле - это статическая константная переменная типа double, обозначающая минимальный порог сходства лиц с двух разных кадров для того, чтобы они считались одним и тем же лицом.
Так же, как и у предка, имеется конструктор, определенный в части "protected", из-за чего создание экземпляра класса "напрямую" невозможжно.
Конструктор копирования, конструктор перемещения, оператор присваивания копированием и оператор присваивания перемещением запрещены. Возможность создания копий данного объекта не предусматривается. Дестректор определен и занимается тем, для ля чего и создан - освобождением памяти.
Работа с классом предполагается следующая. Имеется видеозапись, представленная в виде последовательности картинок, где каждая картинка хранится в виде массива битов. В какой-то момент создается экземпляр класса FaceFinder. Затем, в момент, когда приходит время обрабатывать входные данные, вызвается функция "init". Она сообщает классу, что сейчас начнется обработка. Соответсвенно, существует налогичная функция "finish", сообщающая о том, что процесс обработки катринок завершился /* я сейчас понял, что не совсем понимаю, что в них должно происходить. Ладно finish - там мы можем переорганизовать результаты, чтобы найти совпадения лиц, которые все еще не были найдены */. Сама же обработка происходит в цикле, находящемся между init и finish. В цикле находтся одна-единственная функция "addImage". Эта функция принимает в качестве параметров номер кадра, буфер с данными изображения, размер картинки по горизонтали и вертикали, ScanLine /* придумать описание */ и глубину цвета гартинки (8, 24 или 32 бит). Функция addImage преобразует изображение в изображение билиотеки FaceSDK HImage и опередляет количество лиц на изображении и их положение. Если их ноль - происходит выход из функции. Если один или больше, то каждое лицо обрабатывается в цикле. Сначала по его местоположению берется "описание лица" FSDK_FaceTemplate. Затем проверяется наличие данного лица в базе. В цикле FSDK_FaceTemplate, который мы только что получили, сравнивается со всеми FSDK_FaceTemplate-объектами, которые уже есть в базе. Если есть совпадение, то список регионов лица в базе дополняется кадром, на котором находится текущее лицо. Если нет - то создается новый экземпляр структуры DescriptionData, который добавляется в std::map текущих экземпляров с неким уникальным индексом в качестве ключа /* Каким? */. 
Для доступа к получившимуся набору описаний лиц сущечтвует следующий набор функций:
faceCount - возвращает общее количество лиц.
getFaceInfo - возвращает указатель на FaceDescription по определенному индексу.
frameRegionsNum - возвращает количество регионов, в который встречается определенное лицо (соответствующее определенному индексу).
getFaceRegionByIndex - возвращает определенный регион лица, соответвующего определенному индексу под определенным номером (по умолчанию - самый первый регион).