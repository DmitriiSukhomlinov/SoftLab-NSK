Существует структура "FaceDescription". Эта структура разделена на две части. Первая - это другая структура "FaceDescriptionHeader". FaceDescriptionHeader содержит в себе некую значимую информацию - номер кадра, на котором лицо определено наиболее четко и ясно, координаты лица на данном кадре (вертикаль, горизонталь, ширина и высота) и рамер структуры, которая является шаблоном лица (этот параметр необходим на тот случай, если размер данной структуры будет изменяться в библиотеке FaceSDK). Второе - это адрес хранения первого элемента шаблона лица (шаблон лица представляет из себя массив байтов, а данное поле - адрес самого первого). 
Так же существует структура "FrameRegion". Она содержит в себе два поля - первый кадр и длительность региона в кадрах. Если в регион входит только один начальный кадр, то длительность равна одному.

Реализация класса, занимающегося обработкой входящего потока изображений, поиском на этих изображениях лиц и сохранением этих лиц (однако, сохранением только "в памяти", в базу данный класс не пишет).
Поскольку класс FaceFinder будет хранить в себе набор временных данных, доступ к которым должен быть закрыт для конечного пользователя, предполагается создать интерфейс (абстактный класс, в терминах языка C++), описывающий набор функций, конструкторов и операторов. В свою очередь, класс-наследник будет содержать реализацию данного интерфейса и поля, хранящие данные. Конечный пользователь же, в свою очередь, имеет доступ только к интерфейсу получая, таким образом, доступ к функциональности и не имея доступа к самой реализации.
Описание интерфейса IFaceFinder.
Интерфейс не имеет публичного конструктора (за исключением конструкторов копирования и перемещения), то есть создать объект "извне" невозможно. Для создания объекта объявлена статическая функция "createFaceFinder", находящаяся в публичной части. Данная функция будет вызывать конструктор для создания объекта и возвращать указатель на данный объект. Сам же конструктор объявлен в части "protected" и является виртуальным.
Для корректной работы с памятью, в интерфейсе объявлены следующие компоненты - конструктор копирования, конструктор перемещения, деструктор, оператор присваивания копированием и оператор присваивания перемещением. Все они объявлены имеют реализацию по-умолчанию, деструктор объявлен виртуальным и может быть реализован в наследнике. 
Интерфейс IFaceFinder содержит в себе enum ColorDepth, обозначающий глубину цвета входящего изображения - 8, 24 или 32 бит.

FaceFinder,наследник интерфейса IFaceFinder имеет следующую реализацию:
Класс FaceFinder содержит подструктуру DescriptionData. В Данная структура имеет два поля - структура FaceDescription и вектор структур FrameRegion (поскольку регионов с данным лицом  может быть несколько и они могут быть не связаны). У данной структуры "удалены" конструкторы копирования, перемещения, оператор присваивания и оператор перемещения для того, чтобы каждый объект такого типа был уникальным. Деструктор перегружен и занимается освобождением памяти.
Помимо этого, класс FaceFinder содержит подструктуру FaceDescriptionTemp. Данная структура имеет четыре поля - номер кадра bestFrame, вектор регионов frameRegions, указатель на объект типа TFacePosition, который в содержит в себе данные о местоположении лучшего лицана экране и указатель на объект FSDK_FaceTemplate, хранящий в себе шаблон данного лица. У данной структуры "удалены" конструкторы копирования, перемещения, оператор присваивания и оператор перемещения для того, чтобы каждый объект такого типа был уникальным. Деструктор перегружен и занимается освобождением памяти. Предназначение данной структуры - хранить в себе данные о лучшем найденном лице в момент самого поиска. Когда поиск завершен, данные записываются из экземпляра данной структуры в поля класса FaceFinder.
Класс FaceFinder содержит два нестатических поля - вектор указателей на объект DescriptionData и вектор указателей на объект FaceDescriptionTemp. Помимо этого, класс содержит три статических константных поля - ассоциативный контейнер COLOR_DEPTH_CORRELATION, ставящий в соответствие элементу enum class'а ColorDepth элемент enum'а FSDK_IMAGEMODE из библиотеки FaceSDK, переменная SIMILARITY_THRESHOLD типа double, в которой установлено мера минимального сходства между двумя лицами, чтобы они считались принадлежащими одному человеку и значение MAX_FACE_COUNT, которое представляет из себя максимально возможное количество людей на одном кадре.
Имеет публичный конструктор, вызываемый из статической функции абстрактного класса IFaceFinder для создания объекта данного типа.
Конструктор копирования, конструктор перемещения, оператор присваивания копированием и оператор присваивания перемещением запрещены. Возможность создания копий данного объекта не предусматривается. Деструктор определен и занимается тем, для ля чего и создан - освобождением памяти.
Работа с классом предполагается следующая. Имеется видеозапись, представленная в виде последовательности картинок, где каждая картинка хранится в виде массива битов. В какой-то момент создается экземпляр класса FaceFinder. Затем, в момент, когда приходит время обрабатывать входные данные, вызвается функция "init". Она сообщает классу, что сейчас начнется обработка и производит полную очистку всех полей класса, удаляя из них всю информацию, которая могла остаться с предыдущей обработки. Соответсвенно, существует аналогичная функция "finish", сообщающая о том, что процесс обработки катринок завершился. В момент завершения все данные, которые во время обработки коллекционировались в векторе указателей на объект FaceDescriptionTemp переформируются и заприсивыются в вектор указателей на объект DescriptionData. Сама же обработка происходит в цикле, находящемся между init и finish. В цикле находтся функция "addImage". Эта функция принимает в качестве параметров номер кадра; буфер с данными изображения; размер картинки по горизонтали и вертикали; количество бит, требующихся на одну строку картинки и глубину цвета гартинки (8, 24 или 32 бит). Функция addImage преобразует изображение в изображение билиотеки FaceSDK HImage и опередляет количество лиц на изображении и их положение. Если их ноль - происходит выход из функции. Если один или больше, то каждое лицо обрабатывается в цикле. Сначала по его местоположению берется "описание лица" FSDK_FaceTemplate. Затем проверяется наличие данного лица в базе. В цикле FSDK_FaceTemplate, который мы только что получили, сравнивается со всеми FSDK_FaceTemplate-объектами, которые уже есть в базе. Если есть совпадение, то список регионов лица в базе дополняется кадром, на котором находится текущее лицо. Если нет - то создается новый экземпляр структуры FaceDescriptionTemp, который добавляется в вектор временных элементов.
Для доступа к получившимуся набору описаний лиц сущечтвует следующий набор функций:
faceCount - возвращает общее количество лиц.
getFaceInfo - возвращает указатель на FaceDescription по определенному индексу.
frameRegionsNum - возвращает количество регионов, в который встречается определенное лицо (соответствующее определенному индексу).
getFaceRegionByIndex - возвращает определенный регион лица, соответвующего определенному индексу под определенным номером (по умолчанию - самый первый регион).