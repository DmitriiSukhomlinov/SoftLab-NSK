Для распознавания лиц написана статическая библиотека, встраиваемая в исполняемое приложение. Общий алгоритм работы библиотеки следующий - на вход подается видеозапись, которая разбивается на последовательность кадров. Каждый кадр представляется в виде изображения и на данном изображении, с помощью встраиваемой библиотеки FaceSDK, выполняется поиск лиц людей. Лица сравниваются друг с другом и формируется база данных, содержащая: лицо конкретного человека; порядковые номера кадров, на которых данное лицо встречается в данной видеозаписи; номер кадра, на котором данное лицо представлено в наилучшем виде (по версии билиотеки FaceSDK); описание лица в формате библиотеки FaseSDK с этого кадра, а так же геометрическое расположение лица на кадре.
Основная реализация библиотеки разбита на два класса. Один из них занимается непосредственно считыванием видеозаписи и разбиением ее на кадры, второй - обработкой получившегося кадра, поиском лиц на нем и составлением базы данных. Каждый класс разбит на две части - на интерфейс (абстрактный класс, в терминах языка C++) и реализацию в наследнике (наследниках). Подобная концепция необходима из соображений поставки библиотеки конечному пользователю - мы поставляем библиотеку и пару .h файлов и, в итоге, конечный пользователь имеет полный доступ к функционалу библиотеки при том, что реалиация от него скрыта.
Интерфейс класса, предназначаемого для загрузки видеозаписи представлен в файле "ILoader.h". Конструктор по-умолчанию класса скрыт в области protected, что не позволяет напрямую создавать экземпляры данного класса. Для создания объекта существует статическая функция "createLoader()", объявленная в области public. Данная функция возращает указатель на объект "ILoader", под которым скрывается экземпляр класса-наследника. Помимо этого, абстрактный класс содержит объявленными и имеющими реализацию "по-умолчанию" конструкторы копирования и перемещения, операторы присваивания копированием и перемещением и деструктор (соглано "Правилу пяти" языка C++). Так же, класс содержит набор следующих чисто виртуальных функций: "void init()" (для инициализации загрузчика), "void loadFile(const std::string& path)" (принимает единственный аргумент - путь к видеозаписи), "unsigned char* readNextFrame()" (считывание следующего кадра и возврат указателя на соответствующий данному кадру набор байт) и "finish()" (завершение работы загрузчика). Для доступа к определенным данным используется ряд функций-геттер: "int getSkanLine() const" (возвращает ширину картинки в байтах), "int getPictureWidth() const" (возвращает ширину картинки в пикселях), "int getPictureHeight() const" (возвращает высоту картинки в пикселях), "int getLastReadFrameNumber() const" (возращает порядковый номер последнего прочитанного кадра) и "bool hasFrameToRead() const" (возвращает есть ли еще кадры или нет).
Абстрактный класс реализован в наследнике "AviLoader". Данный класс предназначен для обработки видеороликов формата ".avi". Для создания обработчика видеозаписей другого формата необходимо создать другой класс, например "MkvLoader" и перегрузить в нем все необходмые чисто виртуальные функции. В данной работе мы ограничимся релизацией загрузчика ".avi" файлов. Кадры в ".avi" файле представляют из себя изображения формата ".bmp".
Данный класс использует COM (Component Object Model) библиотеку в процессе работы. Данная библиотека подключается отдельно через командную строку и дает доступ к ряду функций, необходимый для считывания ".avi" файла. Для доступа к функциям модели используется специяальный указатель "CComPtr", которому в качестве аргумента шаблона передается интерфейс "IGetAVIInfo", предназначенный для читания ".avi" файлов. Данный указатель хранится как поле класса в следующем виде: "CComPtr <struct GETAVIINFOLib::IGetAVIInfo> avi;".
Класс содержит поле "int totalFrames;", в котрое записывается количество кадров видеоролика.
Класс содержит два объекта типа BITMAPINFO - "BITMAPINFO* bmpInfoIn;" и "BITMAPINFO bmpInfoOut;". В первом случае, это "сырая" информация, тебующая обработки, а именно - декомпрессии. Во втором случае, это информация об уже декомпрессованом файле. BITMAPINFO содержит в себе структуру BITMAPINFOHEADER, которая хранит информацию о кадрах - размер, ширину, высоту и .т.д, а так же он может хранить в себе сам массив данных, однако, для выполнения нашей задачи нам это не понадобится. Нам лишь необходимо правильно заполнить структуру BITMAPINFOHEADER, чтобы объекты "bmpInfoIn" и "bmpInfoIn" могли быть использованы для декомпрессии картинки. 


Класс "AviLoader" содержит публичный конструктор, вызываемый из функции "createLoader()" базового абстрактного класса. Конструктор не принимает аргументов, его основная задача это "занулить" все поля данного класса. 